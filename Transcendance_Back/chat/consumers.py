import json  # Importe le module json pour manipuler les donn√©es JSON
from channels.db import database_sync_to_async  # Importe l'utilitaire pour ex√©cuter du code synchrone dans un contexte asynchrone
from channels.generic.websocket import AsyncWebsocketConsumer  # Importe la classe de base pour les consommateurs WebSocket asynchrones
from Transcendance.models import Message, User  # Importe le mod√®le Message de votre application
from datetime import datetime

#! ATTENTION A L'HORODATAGE CE N'EST PAS LE BON FUSEAU HORAIRE


'''
#!-------------------------------------------------------------------------------------------------------
    async --> permet de d√©finir une fonction asynchrone

    await --> permet de suspendre l'ex√©cution de la coroutine jusqu'√† ce que le r√©sultat soit pr√™t

    @database_sync_to_async --> permet d'ex√©cuter une fonction asynchrone dans un contexte synchrone
#!-------------------------------------------------------------------------------------------------------
'''

class SystemConsumer(AsyncWebsocketConsumer):  # D√©finit une nouvelle classe de consommateur WebSocket
    async def connect(self):  # M√©thode appel√©e lorsqu'un client se connecte
        self.room_name = 'system_room'  # D√©finit le nom de la salle
        self.room_group_name = self.room_name # Utilise le nom de la salle comme nom du groupe
        await self.channel_layer.group_add(  # Ajoute le canal du client au groupe
            self.room_group_name, self.channel_name
        )
        await self.accept()  # Accepte la connexion WebSocket
    
    async def disconnect(self, code):  # M√©thode appel√©e lorsqu'un client se d√©connecte
        await self.channel_layer.group_discard(  # Retire le canal du client du groupe
            self.room_group_name, self.channel_name
        )

    async def receive(self, text_data):  # M√©thode appel√©e lorsqu'un message est re√ßu du client
        json_text = json.loads(text_data)  # Convertit le texte en JSON
        command = json_text["command"]  # R√©cup√®re le message du JSON
        original_user = json_text["original_user"]
        user_to_add = json_text["user_to_add"]
        original_user = await self.get_user(original_user)  # R√©cup√®re l'utilisateur qui veut effectuer la commande
        user_to_add = await self.get_user(user_to_add)
        await self.command_handler(command, original_user, user_to_add)
    
    async def command_handler(self, command, original_user, user_to_add):
        if command == 'add_friend':
            print(f'üî± command --> {command}\n üî± current_user --> {original_user}\n üî± user_to_add --> {user_to_add}')
            # await self.add_friend_request(original_user, user_to_add)
            # self.channel_layer.group_send(
            #     self.room_group_name,
            #     {
            #         "type": "system_message",
            #         'message': json.dumps({
            #             'username': user_to_add.username,
            #             'command': 'add_friend'
            #         })
            #     }
            # )
        if command == 'accept_friend':
            await self.accept_friend_request(original_user, user_to_add)
        if command == 'reject_friend':
            await self.reject_friend_request(original_user, user_to_add)


#! add_friend : original_user, user_to_add
#! accept_friend : original_user, user_to_add
#! reject_friend : original_user, user_to_add
            
    @database_sync_to_async
    def accept_friend_request(self, original_user, user_to_add):
        original_user.friends.add(user_to_add)
        user_to_add.friend_request.remove(original_user.username)
        original_user.save()
        user_to_add.save()

    @database_sync_to_async
    def reject_friend_request(self, original_user, user_to_add):
        user_to_add.friend_request.remove(original_user.username)
        user_to_add.save()
    
    @database_sync_to_async
    def add_friend_request(self, original_user, user_to_add):
        user_to_add.friend_request.append(original_user.username)
        user_to_add.save()

    @database_sync_to_async
    def get_user(self, username):
        return User.objects.get(username=username)



class ChatConsumer(AsyncWebsocketConsumer):  # D√©finit une nouvelle classe de consommateur WebSocket
    async def connect(self):  # M√©thode appel√©e lorsqu'un client se connecte
        self.room_name = 'public_room'  # D√©finit le nom de la salle
        self.room_group_name = self.room_name  # Utilise le nom de la salle comme nom du groupe
        await self.channel_layer.group_add(  # Ajoute le canal du client au groupe
            self.room_group_name, self.channel_name
        )

        self.user = self.scope["user"]  # R√©cup√®re l'utilisateur de la port√©e

        await self.accept()  # Accepte la connexion WebSocket

    async def disconnect(self, code):  # M√©thode appel√©e lorsqu'un client se d√©connecte
        await self.channel_layer.group_discard(  # Retire le canal du client du groupe
            self.room_group_name, self.channel_name
        )

    async def receive(self, text_data):  # M√©thode appel√©e lorsqu'un message est re√ßu du client
        json_text = json.loads(text_data)  # Convertit le texte en JSON
        message = json_text["message"].strip()  # R√©cup√®re le message du JSON and remove leading/trailing whitespaces

        if not message: # Si le message est vide, ne rien faire
            return
        
        user = self.scope['user']  # R√©cup√®re l'utilisateur de la port√©e
        username = user.username if user.is_authenticated else "Anonyme"  # R√©cup√®re le nom d'utilisateur de l'utilisateur ou "Anonyme" si l'utilisateur n'est pas authentifi√©

        new_message = Message(user=user, content=message)  # Cr√©e un nouveau message
        await self.save_message(new_message)  # Sauvegarde le message dans la base de donn√©es

        timestamp = datetime.now()  # R√©cup√®re le timestamp actuel
        formatted_timestamp = timestamp.strftime('%b. %d, %Y, %I:%M %p')  # Format the timestamp
        formatted_timestamp = formatted_timestamp.replace("AM", "a.m.").replace("PM", "p.m.")  # Change AM/PM to a.m./p.m.
        await self.channel_layer.group_send(  # Envoie le message √† tous les clients du groupe
            self.room_group_name, 
            {
                "type": "chat_message", 
                "message": message,
                "username": username,
                "timestamp": formatted_timestamp
            }
        )
    
    async def chat_message(self, event):  # M√©thode appel√©e lorsqu'un message de chat est re√ßu du groupe
        message = event['message']  # R√©cup√®re le message de l'√©v√©nement
        timestamp = event.get("timestamp", "")  # R√©cup√®re le timestamp de l'√©v√©nement
        username = event.get("username", "Anonyme")  # R√©cup√®re le nom d'utilisateur de l'√©v√©nement
        await self.send(text_data=json.dumps({"message": message, "username" : username, "timestamp" : timestamp}))  # Envoie le message au client

    @database_sync_to_async
    def save_message(self, message):  # M√©thode pour sauvegarder un message dans la base de donn√©es
        message.save()  # Sauvegarde le message